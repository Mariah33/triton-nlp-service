[build-system]
requires = ["setuptools>=68.0.0", "wheel", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "triton-nlp-service"
version = "1.0.0"
description = "Comprehensive NLP service using NVIDIA Triton Inference Server"
readme = "README.md"
requires-python = ">=3.10,<3.12"
license = {text = "MIT"}
authors = [
    {name = "Mariah", email = "mariah.wilcher@gmail.com"}
]
maintainers = [
    {name = "Mariah", email = "mariah.wilcher@gmail.com"}
]
keywords = [
    "nlp",
    "triton",
    "machine-learning",
    "data-detection",
    "translation",
    "ner",
    "pii-detection",
    "transliteration",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies
dependencies = [
    # Deep Learning Frameworks
    "torch>=2.0.0",
    "tensorflow>=2.12.0",
    "transformers>=4.35.0",
    "sentence-transformers>=2.2.2",
    "onnx>=1.14.0",
    "onnxruntime>=1.15.0",

    # NLP Core
    "spacy>=3.7.0",
    "nltk>=3.8",
    "langdetect>=1.0.9",

    # Data Type Detection
    "presidio-analyzer>=2.2.33",
    "presidio-anonymizer>=2.2.33",
    "phonenumbers>=8.13.0",
    "email-validator>=2.0.0",
    "python-stdnum>=1.18",
    "validators>=0.20.0",
    "pycountry>=22.3.5",
    "scrubadub>=2.0.0",

    # Transliteration
    "indic-nlp-library>=0.91",
    "polyglot>=16.7.4",
    "PyICU>=2.11",

    # Translation
    "sentencepiece>=0.1.99",
    "sacremoses>=0.0.53",

    # Triton Client
    "tritonclient[all]>=2.34.0",
    "grpcio>=1.54.0",
    "protobuf>=3.20.3",

    # Web Framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",

    # Data Processing
    "numpy>=1.21.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",

    # Utilities
    "python-dateutil>=2.8.2",
    "pyyaml>=6.0",
    "regex>=2023.6.3",
    "tqdm>=4.65.0",
    "python-dotenv>=1.0.0",
    "faker>=19.0.0",
    "rich>=13.5.0",
    "click>=8.1.6",
    "typer>=0.9.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Code Quality
    "ruff>=0.14.2",  # Handles formatting, linting, and import sorting
    "mypy>=1.5.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.3.3",

    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-watch>=4.2.0",
    "pytest-env>=1.0.0",
    "hypothesis>=6.82.0",
    "factory-boy>=3.3.0",

    # Type Stubs
    "types-requests>=2.31.0",
    "types-pyyaml>=6.0.12",
    "types-python-dateutil>=2.8.19",
    "types-tqdm>=4.66.0",

    # API Testing
    "httpx>=0.24.1",
    "requests-mock>=1.11.0",
    "responses>=0.23.3",
    "aioresponses>=0.7.4",

    # Development Tools
    "ipython>=8.14.0",
    "ipdb>=0.13.13",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "jupyterlab>=4.0.0",

    # Profiling
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
    "scalene>=1.5.31",
    "line-profiler>=4.1.0",
    "pympler>=1.0.1",

    # Testing Utilities
    "freezegun>=1.2.2",
    "time-machine>=2.12.0",
    "watchdog>=3.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "mkdocstrings[python]>=0.22.0",
    "mkdocs-mermaid2-plugin>=0.6.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

# Monitoring and observability
monitoring = [
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.19.0",
    "opentelemetry-sdk>=1.19.0",
    "opentelemetry-instrumentation-fastapi>=0.40b0",
    "structlog>=23.1.0",
]

# Performance testing
perf = [
    "locust>=2.15.1",
    # Note: artillery is a Node.js tool, install separately: npm install -g artillery
]

# CI/CD dependencies
ci = [
    "tox>=4.6.4",
    "nox>=2023.4.22",
    "invoke>=2.2.0",
    "coverage[toml]>=7.3.0",
    "codecov>=2.1.13",
]

# Optional advanced transliteration (has build dependencies)
transliteration = [
    "ai4bharat-transliteration>=1.1.0",
]

# All development dependencies
all = [
    "triton-nlp-service[dev,docs,monitoring,perf,ci,transliteration]",
]

[project.urls]
Homepage = "https://github.com/mariah33/triton-nlp-service"
Documentation = "https://triton-nlp-service.readthedocs.io"
Repository = "https://github.com/mariah33/triton-nlp-service"
Issues = "https://github.com/mariah33/triton-nlp-service/issues"
Changelog = "https://github.com/mariah33/triton-nlp-service/blob/main/CHANGELOG.md"

[project.scripts]
triton-nlp = "src.cli:main"
triton-nlp-client = "client.triton_client:main"
triton-nlp-server = "client.fastapi_server:main"

# ============================================================================
# TOOL CONFIGURATIONS
# ============================================================================

# ----------------------------------------------------------------------------
# Setuptools
# ----------------------------------------------------------------------------
[tool.setuptools]
packages = ["src", "client", "model_repository"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.pbtxt", "*.md"]

# ----------------------------------------------------------------------------
# Ruff - Unified Linting, Formatting, and Import Sorting
# Replaces: black (formatting), isort (import sorting), flake8 (linting)
# ----------------------------------------------------------------------------
[tool.ruff]
# Python version target
target-version = "py310"

# Line length (applies to both linting and formatting)
line-length = 150

# File/folder exclusions
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*.pyc",
    "*.pyi",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "N",      # pep8-naming
    "D",      # pydocstyle
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C90",    # mccabe
    "DJ",     # flake8-django
    "DTZ",    # flake8-datetimez
    "EM",     # flake8-errmsg
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "TID",    # flake8-tidy-imports
    "INT",    # flake8-gettext
    "PTH",    # flake8-use-pathlib
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
    "ERA",    # eradicate
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy-specific rules
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]

# Never ignore these rules
ignore = [
    "E501",    # line too long (handled by formatter)
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D107",    # Missing docstring in __init__
    "D401",    # First line should be in imperative mood
    "ANN401",  # Dynamically typed expressions (typing.Any)
    "S101",    # Use of assert (needed for tests)
    "BLE001",  # Do not catch blind exception
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "COM812",  # Missing trailing comma
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Code Formatting (replaces Black)
[tool.ruff.format]
# Use double quotes for strings (black-compatible)
quote-style = "double"

# Indent with spaces, not tabs
indent-style = "space"

# Respect magic trailing commas (preserves black behavior)
skip-magic-trailing-comma = false

# Automatically detect line ending
line-ending = "auto"

# Format docstrings
docstring-code-format = true

# Import Sorting (replaces isort)
[tool.ruff.lint.isort]
# Define project-specific modules
known-first-party = ["src", "client", "model_repository"]

# Combine "from x import a" and "from x import b" into "from x import a, b"
combine-as-imports = true

# Force sorting within import sections
force-sort-within-sections = true

# Order of import sections
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# Add blank line between import groups
lines-after-imports = 2

# Force imports to top of file (with exceptions in per-file-ignores)
force-to-top = []

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.field_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "D104"]
# PLC0415: Model imports must be inside fixtures after patching sys.modules and sys.path
"tests/*.py" = ["S101", "D103", "ANN001", "ANN201", "PLR2004", "SLF001", "INP001", "PT006", "PLC0415"]
"tests/**/*.py" = ["S101", "D103", "ANN001", "ANN201", "PLR2004", "SLF001", "INP001", "PT006", "PLC0415"]
"scripts/*.py" = ["D103", "ANN201", "T20"]
"model_repository/*/1/model.py" = ["D102", "D103", "ANN201"]
"docs/*.py" = ["D103", "INP001"]

[tool.ruff.lint.pylint]
max-args = 7
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.pycodestyle]
max-doc-length = 150
ignore-overlong-task-comments = true

# ----------------------------------------------------------------------------
# MyPy - Type Checking
# ----------------------------------------------------------------------------
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "triton_python_backend_utils"
ignore_missing_imports = true

# ----------------------------------------------------------------------------
# Pytest - Testing
# ----------------------------------------------------------------------------
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--disable-warnings",
    "--no-header",
    "--tb=short",
    "--maxfail=10",
    "--color=yes",
    "--code-highlight=yes",
    "--capture=no",
    "-p no:cacheprovider",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "model: marks tests for specific models",
    "benchmark: marks tests as benchmarks",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
log_cli = true
log_cli_level = "INFO"

# ----------------------------------------------------------------------------
# Coverage - Test Coverage
# ----------------------------------------------------------------------------
[tool.coverage.run]
branch = true
parallel = true
source = ["src", "client", "model_repository"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/dist-packages/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/config/*",
    "*/setup.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2
skip_covered = false
skip_empty = false
sort = "cover"

[tool.coverage.html]
directory = "htmlcov"
title = "Triton NLP Service Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"

# ----------------------------------------------------------------------------
# Bandit - Security Checking
# ----------------------------------------------------------------------------
[tool.bandit]
targets = ["src", "client", "model_repository"]
exclude_dirs = ["tests", "scripts", "docs"]
severity = "medium"
confidence = "medium"
max_line_length = 150
progress = true
reports = ["txt", "json", "csv", "xml"]
skips = ["B101", "B601", "B602", "B603", "B604", "B605", "B606", "B607", "B608", "B609"]

# ----------------------------------------------------------------------------
# PyLint - Additional Linting (optional)
# ----------------------------------------------------------------------------
[tool.pylint.main]
py-version = "3.10"
ignore = ["CVS", ".git", "__pycache__", "build", "dist"]
jobs = 0
persistent = true
suggestion-mode = true

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0212",  # Protected access
]

[tool.pylint.format]
max-line-length = 150

# ----------------------------------------------------------------------------
# Tox - Test Automation
# ----------------------------------------------------------------------------
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{310,311}, lint, type, security
isolated_build = true
skip_missing_interpreters = true

[testenv]
deps =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-asyncio>=0.21.0
commands =
    pytest {posargs}

[testenv:lint]
deps =
    ruff>=0.1.0
commands =
    ruff check src client model_repository tests
    ruff format --check src client model_repository tests

[testenv:type]
deps =
    mypy>=1.5.0
    types-requests
    types-pyyaml
commands =
    mypy src client model_repository

[testenv:security]
deps =
    bandit[toml]>=1.7.5
    safety>=2.3.5
commands =
    bandit -r src client model_repository
    safety check
"""

# ----------------------------------------------------------------------------
# Commitizen - Conventional Commits
# ----------------------------------------------------------------------------
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/__init__.py:__version__",
]

# ----------------------------------------------------------------------------
# Semantic Release - Automated Releases
# ----------------------------------------------------------------------------
[tool.semantic_release]
version_variable = "src/__init__.py:__version__"
version_toml = "pyproject.toml:project.version"
major_on_zero = false
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "python -m build"

# ----------------------------------------------------------------------------
# UV Configuration
# ----------------------------------------------------------------------------
[tool.uv]
index-url = "https://pypi.org/simple"
extra-index-url = ["https://download.pytorch.org/whl/cpu"]
index-strategy = "unsafe-best-match"  # Allow picking best version across all indexes


[tool.uv.pip]
system = false
break-system-packages = false
